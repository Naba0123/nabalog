{"componentChunkName":"component---src-templates-blog-post-js","path":"/2019/0630/","result":{"data":{"site":{"siteMetadata":{"title":"なばろぐ","description":"プログラミング、ピアノ作曲・演奏、雑記など"}},"markdownRemark":{"html":"<p>Laravel の開発環境として、</p>\n<ul>\n<li>サーバー周り：Laradock</li>\n<li>エディタ：Visual Studio Code (VSCode)</li>\n<li>デバッグ：Xdebug (Break Point)</li>\n</ul>\n<p>の環境を整えたので、そこまでの自分用構築メモです。<br>\n認識が間違っている部分あったら申し訳ないです。</p>\n<p>当初は VSCode Remote Development で構築しようと思いましたが、Docker のコンテナと開発手法の相性が悪そう（workspace, nginx, php-fpm でコンテナが分かれているから?）なので、通常のリモートデバッグで進めます。</p>\n<p><br><hr></p>\n<p>[:contents]</p>\n<hr><br>\n<!-- more -->\n<h1>環境</h1>\n<ul>\n<li>Windows 10 Pro 1809 (Windows 10 October 2018 Update)</li>\n<li>\n<p>Docker Desktop 2.0.0.3 (Hyper-V)</p>\n<figure class=\"figure-image figure-image-fotolife\" title=\"Docker Desktop Version\">[f:id:naba0123:20190629121758p:w400]<figcaption>Docker Desktop Version</figcaption></figure>\n</li>\n<li>PHP 7.2.19</li>\n<li>Laravel 5.8.26</li>\n<li>Laradock (2019/06/30 時点の master)<br>\n[https://github.com/laradock/laradock/tree/a2c7b467662706ba1af118048baeaf6e27f6a74d:embed:cite]</li>\n<li>Visual Studio Code 1.35.1<br>\n[f:id:naba0123:20190630012034p:plain]</li>\n</ul>\n<br>\n<h1>1. Docker 設定</h1>\n<p>Docker の Shared Drive を On に。<br>\nLaradock が共有前提のため、動かない。</p>\n<figure class=\"figure-image figure-image-fotolife\" title=\"C ドライブと D ドライブ（一応）をOnに\">[f:id:naba0123:20190630000552p:w400]<figcaption>C ドライブと D ドライブ（一応）をOnに</figcaption></figure>\n<br>\n<h1>2. Laradock 設定</h1>\n<p>前提として、以下のディレクトリ構成で進める。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">workspace\n |- laradock\n |- application (Laravel Project)</code></pre></div>\n<p>Laradock を clone する。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">cd</span> workspace\n$ <span class=\"token function\">git</span> clone https://github.com/Laradock/laradock.git</code></pre></div>\n<p>Laradock でいじる設定内容は以下の通り。</p>\n<ul>\n<li>application のパス設定（.env）</li>\n<li>Timezome の設定（.env）</li>\n<li>Xdebug 有効化（.env）</li>\n<li>Xdebug の Remote 設定（php-fpm/xdebug.ini 及び workspace/xdebug.ini）</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ cp env-example .env  # .env ファイルの作成\n$ vim .env  # お好きなエディタで編集\n---\n8行目あたり、今回のディレクトリ構成に合わせる\n- APP_CODE_PATH_HOST=../\n+ APP_CODE_PATH_HOST=../application\n---\n99行目あたり、WORKSPACE に Xdebug をインストール\n- WORKSPACE_INSTALL_XDEBUG=false\n+ WORKSPACE_INSTALL_XDEBUG=true\n---\n143行目あたり、WORKSPACE_TIMEZONE に Asia/Tokyo を設定\n- WORKSPACE_TIMEZONE=UTC\n+ WORKSPACE_TIMEZONE=Asia/Tokyo\n---\n158行目あたり、PHP_FPM に Xdebug をインストール\n- PHP_FPM_INSTALL_XDEBUG=false\n+ PHP_FPM_INSTALL_XDEBUG=true\n\n$ vim php-fpm/xdebug.ini # Xdebug の内容を設定\n- ; xdebug.remote_host=dockerhost\n- xdebug.remote_connect_back=1\n- xdebug.remote_port=9000\n- xdebug.remote_autostart=0\n- xdebug.remote_enable=0\n- xdebug.cli_color=0\n+ xdebug.remote_host=host.docker.internal  # コメントを解除して、dockerホストを向くように\n+ xdebug.remote_connect_back=0  # 複数の接続先に自動的につなげてくれるそうですが、今回は無効\n+ xdebug.remote_port=9002  # デフォルト9000だと php-fpm のコンテナ自体のポート番号とかぶるので、Xdebug は番号をずらす\n+ xdebug.remote_autostart=1  # セッションを自動で開始してくれるようにする\n+ xdebug.remote_enable=1  # Xdebug のリモートデバッグを有効化\n+ xdebug.cli_color=1  # CLI 上でも var_dump をカラー表示してくれたりするらしい（[https://xdebug.org/docs/display:title]）\n\n$ cp php-fpm/xdebug.ini workspace/xdebug.ini  # php-fpm の xdebug.ini を全く同じ内容が必要なので、workspace にコピー（上書き）</code></pre></div>\n<p>なお、新規プロジェクトを今回のタイミングで作成したい場合は、一旦「APP<em>CODE</em>PATH_HOST」を「../」のままコンテナを作成し、<br>\nコンテナ内でプロジェクトを作成した後に再度「../aplication」のようなプロジェクトパスに設定をしたほうが効率が良いかと思います。\n（参考：[https://laradock.io/documentation/#install-laravel-from-a-docker-container:title]）</p>\n<p>これで Laradock の設定周りは完了です。</p>\n<br>\n<h2>補足：Laravel アプリケーション作成</h2>\n<p>今回の記事の範囲ではないため、さっくりと。</p>\n<p>先程の workspace/application に Laravel プロジェクトを作成します。<br>\n作成は、環境が整っているコンテナ内から行います。</p>\n<p>Laradock を起動します。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ docker-compose up -d --build nginx mysql</code></pre></div>\n<p>初回ビルド、恐らく10分～20分ぐらいかかるんじゃないですかね。</p>\n<p>終わった後に、以下が出てきたら多分OK。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Creating laradock_docker-in-docker_1 ... done\nCreating laradock_mysql_1            ... done\nCreating laradock_workspace_1        ... done\nCreating laradock_php-fpm_1          ... done\nCreating laradock_nginx_1            ... done</code></pre></div>\n<p>コマンドプロンプトなりを開き、コンテナ内に入ります。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&gt; docker ps\nCONTAINER ID        IMAGE                COMMAND                  CREATED             STATUS              PORTS                                      NAMES\na34c5388b983        laradock_nginx       &quot;/bin/bash /opt/star…&quot;   About an hour ago   Up About an hour    0.0.0.0:80-&gt;80/tcp, 0.0.0.0:443-&gt;443/tcp   laradock_nginx_1\nc7c75d809a64        laradock_php-fpm     &quot;docker-php-entrypoi…&quot;   About an hour ago   Up About an hour    9000/tcp                                   laradock_php-fpm_1\n850df865449b        laradock_workspace   &quot;/sbin/my_init&quot;          About an hour ago   Up About an hour    0.0.0.0:2222-&gt;22/tcp                       laradock_workspace_1\n9007b173d634        laradock_mysql       &quot;docker-entrypoint.s…&quot;   About an hour ago   Up About an hour    0.0.0.0:3306-&gt;3306/tcp, 33060/tcp          laradock_mysql_1\nff215dd5f892        docker:dind          &quot;dockerd-entrypoint.…&quot;   About an hour ago   Up About an hour    2375/tcp                                   laradock_docker-in-docker_1\n\n&gt; docker exec -it laradock_workspace_1 /bin/bash\nroot@850df865449b:/var/www#</code></pre></div>\n<p>workspace コンテナ内に入ったら、Laravel アプリケーションを作成します。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"># composer create-project --prefer-dist laravel/laravel application</code></pre></div>\n<p>ちなみに、「—prefer-dist」を書くととりあえず早くなるそうです。\n（参考：[https://kin29.info/composer-%E3%81%AE-prefer-dist%E3%81%A3%E3%81%A6%E3%82%88%E3%81%8F%E4%BD%BF%E3%81%86%E3%81%91%E3%81%A9%E4%BD%95%E3%81%97%E3%81%A6%E3%82%8B%EF%BC%9F/:title]）</p>\n<br>\n<h1>3. VSCode 設定</h1>\n<p>VSCode に PHP Debug を導入します。これで Break Point を張ったりできます。</p>\n<p>[f:id:naba0123:20190630005714p:w400]</p>\n<p>VSCodeで、Laravel Application のフォルダを開いて、とりあえず Break Point を確認したいので、「routes/web.php」を開き、「return view(‘welcome’);」の行に Break Point 設定。</p>\n<figure class=\"figure-image figure-image-fotolife\" title=\"15行目に Break Point 設定\">[f:id:naba0123:20190630011739p:w400]<figcaption>15行目に Break Point 設定</figcaption></figure>\n<br>\n<p>次にデバッグ設定、デバッグ画面の構成追加から、「PHP」を選び（初回のみ）、「launch.jon」が出てきたら以下のように設定をします。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">{  \n    // Use IntelliSense to learn about possible attributes.  \n    // Hover to view descriptions of existing attributes.  \n    // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387  \n    &quot;version&quot;: &quot;0.2.0&quot;,  \n    &quot;configurations&quot;: [  \n        {  \n            &quot;name&quot;: &quot;Listen for XDebug&quot;,  \n            &quot;type&quot;: &quot;php&quot;,  \n            &quot;request&quot;: &quot;launch&quot;,  \n            &quot;port&quot;: 9002,  // 9002 合わせる\n            &quot;log&quot;: true,  \n            &quot;pathMappings&quot;: {  \n                &quot;/var/www&quot;:&quot;${workspaceRoot}&quot;  \n            }  \n        },  \n        {  \n            &quot;name&quot;: &quot;Launch currently open script&quot;,  \n            &quot;type&quot;: &quot;php&quot;,  \n            &quot;request&quot;: &quot;launch&quot;,  \n            &quot;program&quot;: &quot;${file}&quot;,  \n            &quot;cwd&quot;: &quot;${fileDirname}&quot;,  \n            &quot;port&quot;: 9002  \n        }  \n    ]  \n}  </code></pre></div>\n<figure class=\"figure-image figure-image-fotolife\" title=\"launch.json\">[f:id:naba0123:20190630012211p:w400]<figcaption>launch.json</figcaption></figure>\n<br>\n<h1>4. Xdebug テスト</h1>\n<p>VSCode デバッグ画面左上の DEBUG を「Listen for XDebug」にして、実行。<br>\nステータスバーなどが黄色くなったら準備完了。</p>\n<p>ブラウザで localhost にアクセスをすると、止まるはずです。</p>\n<p>[f:id:naba0123:20190630012443p:w400]</p>\n<p>変数の中身もちゃんと確認できて、開発がきっと捗るはず。</p>\n<p>おしまい。</p>\n<br>\n<h3>参考</h3>\n<ul>\n<li>[https://kkznch.hatenablog.com/entry/2018/01/02/143508:title]</li>\n<li>[https://qrunch.net/@hiroita/entries/oxjz3uU8BKd6TDAR:title]</li>\n<li>[https://tech.bita.jp/article/6:title]</li>\n<li>[https://qiita.com/castaneai/items/d5fdf577a348012ed8af:title]</li>\n<li>[https://qiita.com/gigosa/items/90431be7a6a79db78480:title]</li>\n</ul>","frontmatter":{"title":"","date":null,"tags":null},"id":"3ef981d4-8b99-5064-98f1-fcb7b38b2d3c"},"relatedPosts":{"edges":[]}},"pageContext":{"slug":"/2019/0630/","tags":["_____"]}}}