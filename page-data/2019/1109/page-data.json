{"componentChunkName":"component---src-templates-blog-post-js","path":"/2019/1109/","result":{"data":{"site":{"siteMetadata":{"title":"なばろぐ","description":"プログラミング、ピアノ作曲・演奏、雑記など"}},"markdownRemark":{"html":"<div class=\"alert info\">\nはてなブログからの移行記事\n</div>\n<h1>はじめに</h1>\n<p>この記事では、Windows 10 上の Docker で立ち上げた Selenium Server に対して、WSL (Windows Subsystem for Linux) 上で Python スクリプトを書いて Web スクレイピング環境を構築する手順を説明します。</p>\n<h2>免責</h2>\n<p>Web スクレイピングは法的にも関わってくるため、利用する際には対象の Web サイトの利用規約等を把握した上で自己責任で行ってください。<br>\nWeb スクレイピングについては、Wikipedia のリンクを貼っておきます。（[https://ja.wikipedia.org/wiki/%E3%82%A6%E3%82%A7%E3%83%96%E3%82%B9%E3%82%AF%E3%83%AC%E3%82%A4%E3%83%94%E3%83%B3%E3%82%B0:title]）</p>\n<h2>環境</h2>\n<ul>\n<li>\n<p>Windows 10 Pro 1903 (Windows 10 May 2019 Update)</p>\n<ul>\n<li>Docker for Windows 2.1.0.4<br>\n[f:id:naba0123:20191109093621p:h200]</li>\n<li>WSL</li>\n<li>Ubuntu 18.04 LTS</li>\n<li>Python 3.6.8</li>\n<li>UltraVNC Viewer 1.1.24 (動作確認用)</li>\n</ul>\n</li>\n</ul>\n<!-- more -->\n<h1>Selenium Server (Docker) の準備</h1>\n<p>Docker のインストールは省略します。</p>\n<h2>コンテナ起動</h2>\n<p>Windows 上で docker コマンドが使えるところで、以下を実行してコンテナを起動します。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ docker run -d -p 4444:4444 -p 5900:5900 selenium/standalone-chrome-debug:latest\n7ef4267bba50ec1b80361325f10560502d8162c59acbc4688d34f26192154ec9</code></pre></div>\n<p><strong>docker ps</strong> を叩き、コンテナが起動していることを確認します。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ docker ps\nCONTAINER ID        IMAGE                                     COMMAND                  CREATED             STATUS              PORTS                                            NAMES\n7ef4267bba50        selenium/standalone-chrome-debug:latest   &quot;/opt/bin/entry_poin…&quot;   16 seconds ago      Up 15 seconds       0.0.0.0:4444-&gt;4444/tcp, 0.0.0.0:5900-&gt;5900/tcp   mystifying_williams</code></pre></div>\n<p>今回使用している Docker イメージは、Selenium 公式のもののうちの <strong>standalone-chrome-debug</strong> で、Selenium Server や、特定のバージョンの Chrome インストールされています。<br>\n<strong>-debug</strong> がついているものは、VNCサーバーがついているようです。</p>\n<p>また、Docker のポートフォワード機能で、以下を設定しています。</p>\n<ul>\n<li>\n<p>4444 : Selenium サーバー</p>\n<ul>\n<li>Python スクリプトから Remote サーバーとして指定するために必要になります</li>\n</ul>\n</li>\n<li>\n<p>5900 : VNC サーバー</p>\n<ul>\n<li>Windows 上から UltraVNC Viewer を介してコンテナ内の Chrome の動作を確認するのに必要になります</li>\n</ul>\n</li>\n</ul>\n<p>このあたりの詳細は、GitHub を参考にしてください。\n[https://github.com/SeleniumHQ/docker-selenium:embed:cite]</p>\n<h2>VNC クライアントで Docker へ接続</h2>\n<p>VNC クライアントを使用することで、 Docker 内で実際にどのようにスクレイピングが行われているのか、<br>\n実際の Docker 内の Chrome の画面を見ながら開発を行うことができます。</p>\n<p>今回は、UltraVNC Viewer というソフトウェアを使用します。\n[https://www.uvnc.com/:embed:cite]</p>\n<p>インストール方法は割愛します。</p>\n<p>起動して、ホスト名に <strong>localhost:5900</strong> を指定して、「Connect」を押下します。<br>\n[f:id:naba0123:20191109112844p:h200]</p>\n<p>次に、Password を聞かれるので、<strong>secret</strong> を入力して、「Log On」を押下します。<br>\n[f:id:naba0123:20191109113012p:h200]</p>\n<p>無事、Selenium Server のコンテナに接続することができました。<br>\n[f:id:naba0123:20191109113142p:h200]</p>\n<p>画面内の適当な部分を右クリックすることで、アプリケーションメニューが開き、Chromeがインストールされていて、実行できることを確認できます。<br>\n[f:id:naba0123:20191109113313p:h200]</p>\n<p>コンテナに接続できたら、そのまま置いておきます。</p>\n<h1>WSL (Client) の準備</h1>\n<p>WSL のインストールについては例によって割愛します。</p>\n<h2>Python のインストール</h2>\n<p>Python をインストールします（ない場合）。<br>\n今回は WSL の環境として Ubuntu を使用しているので、<strong>apt</strong> を使用しています。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ sudo apt install python3 pip3</code></pre></div>\n<h2>selenium モジュールのインストール</h2>\n<p>Python から Selenium を使用するために、モジュールをインストールします。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ pip3 install selenium</code></pre></div>\n<h2>テストスクリプトの準備</h2>\n<p>WSL 上で、スクリプトを作成します。<br>\n直接 WSL Terminal から vim などで作成しても良いですが、\n今回は、Visual Studio Code の Remote Development 機能を使用して作成を行いました。</p>\n<p>Visual Studio Code の Remote Development については、検索するとたくさん出てくるかと思います。<br>\n以下に、 Microsoft 公式ドキュメントを貼っておきます。\n[https://code.visualstudio.com/docs/remote/wsl:embed:cite]</p>\n<p>適当なスクリプトを作成し、以下を入力してください。</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> time\n<span class=\"token keyword\">from</span> selenium <span class=\"token keyword\">import</span> webdriver\n<span class=\"token keyword\">from</span> selenium<span class=\"token punctuation\">.</span>webdriver<span class=\"token punctuation\">.</span>common<span class=\"token punctuation\">.</span>desired_capabilities <span class=\"token keyword\">import</span> DesiredCapabilities\n\ndriver <span class=\"token operator\">=</span> webdriver<span class=\"token punctuation\">.</span>Remote<span class=\"token punctuation\">(</span>\n   command_executor<span class=\"token operator\">=</span><span class=\"token string\">'http://localhost:4444/wd/hub'</span><span class=\"token punctuation\">,</span>\n   desired_capabilities<span class=\"token operator\">=</span>DesiredCapabilities<span class=\"token punctuation\">.</span>CHROME<span class=\"token punctuation\">)</span>\ndriver<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'https://www.google.com/'</span><span class=\"token punctuation\">)</span>\ntime<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\nsearch_box <span class=\"token operator\">=</span> driver<span class=\"token punctuation\">.</span>find_element_by_name<span class=\"token punctuation\">(</span><span class=\"token string\">\"q\"</span><span class=\"token punctuation\">)</span>\nsearch_box<span class=\"token punctuation\">.</span>send_keys<span class=\"token punctuation\">(</span><span class=\"token string\">'ChromeDriver'</span><span class=\"token punctuation\">)</span>\nsearch_box<span class=\"token punctuation\">.</span>submit<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\ntime<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\ndriver<span class=\"token punctuation\">.</span>quit<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<figure class=\"figure-image figure-image-fotolife\" title=\"Remote Development を使用すると左下に「WSL: Ubuntu-18.04」などと記載されます\">[f:id:naba0123:20191109112151p:h200]<figcaption>Remote Development を使用すると左下に「WSL: Ubuntu-18.04」などと記載されます</figcaption></figure>\n<p>5行目～7行目の</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">driver <span class=\"token operator\">=</span> webdriver<span class=\"token punctuation\">.</span>Remote<span class=\"token punctuation\">(</span>\n   command_executor<span class=\"token operator\">=</span><span class=\"token string\">'http://localhost:4444/wd/hub'</span><span class=\"token punctuation\">,</span>\n   desired_capabilities<span class=\"token operator\">=</span>DesiredCapabilities<span class=\"token punctuation\">.</span>CHROME<span class=\"token punctuation\">)</span></code></pre></div>\n<p>で、Selenium Server に接続する設定を指定します。</p>\n<ul>\n<li><strong>command_executor</strong> には、Selenium Server のIP、ポート、エンドポイントを指定</li>\n<li><strong>desired_capabilities</strong> には、スクレイピングを行う Web ブラウザの種類を指定</li>\n</ul>\n<p>このたりは、以下のサイトで詳しく見れます。\n[https://selenium-python.readthedocs.io/getting-started.html#simple-usage:embed:cite]</p>\n<h1>スクレイピングテスト</h1>\n<p>WSL 側でスクリプトを実行すると、コンテナ内で自動で Chrome が立ち上がって想定通りの動作をすることが確認できます。  </p>\n<figure class=\"figure-image figure-image-fotolife\" title=\"クリックで拡大できます\">[f:id:naba0123:20191109114954g:plain]<figcaption>クリックで拡大できます</figcaption></figure>\n<h1>まとめ</h1>\n<ul>\n<li>Selenium サーバーが Docker コンテナ側にあることで、特定のバージョンの Chrome でのテストなどがしやすく、別の環境に持っていくことも簡単になる</li>\n</ul>\n<h1>参考</h1>\n<p>[https://qiita.com/memakura/items/20a02161fa7e18d8a693:embed:cite]\n[https://qiita.com/yutachaos/items/4a1da5d55a3bf0df889e:embed:cite]\n[https://qiita.com/reflet/items/8f541edde58d635daac4:embed:cite]</p>","frontmatter":{"title":"Python (Client) + Selenium Server (Docker) で Web スクレイピング環境構築","date":"2019/11/09 12:06","tags":["Python","Selenium","Docker"]},"id":"73bf763c-d9dd-5aff-96bc-50ba16c3a317","excerpt":"はじめに この記事では、Windows 10 上の Docker で立ち上げた Selenium Server に対して、WSL (Windows Subsystem for Linux) 上で Python スクリプトを書いて Web…"},"relatedPosts":{"edges":[{"node":{"fields":{"slug":"/2020/0415/"},"frontmatter":{"title":"Docker + Jenkins で GatsbyJs ビルド環境作成","date":"2020/04/15 23:17","tags":["Docker","Jenkins","GatsbyJS","Node.js"]},"id":"9468aecc-ca75-59c6-a71c-cfd720dedc36"}},{"node":{"fields":{"slug":"/2019/1109/"},"frontmatter":{"title":"Python (Client) + Selenium Server (Docker) で Web スクレイピング環境構築","date":"2019/11/09 12:06","tags":["Python","Selenium","Docker"]},"id":"73bf763c-d9dd-5aff-96bc-50ba16c3a317"}}]}},"pageContext":{"slug":"/2019/1109/","tags":["Python","Selenium","Docker"]}}}