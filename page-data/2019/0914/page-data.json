{"componentChunkName":"component---src-templates-blog-post-js","path":"/2019/0914/","result":{"data":{"site":{"siteMetadata":{"title":"なばろぐ","description":"プログラミング、ピアノ作曲・演奏、雑記など"}},"markdownRemark":{"html":"<div class=\"alert info\">\nはてなブログからの移行記事\n</div>\n<!-- more -->\n<p>Google Api の設定をして、Developツール上で情報が取得できるところまでの確認</p>\n<h1>API 準備</h1>\n<h2>Google Api Console ログイン</h2>\n<p>[https://console.developers.google.com/:embed:cite]</p>\n<h2>新規プロジェクトの作成</h2>\n<figure class=\"figure-image figure-image-fotolife\" title=\"プロジェクト名は好きなものを\">[f:id:naba0123:20190914120413p:plain]<figcaption>プロジェクト名は好きなものを</figcaption></figure>\n<h2>Fitness API 追加</h2>\n<p>左側メニューの「ライブラリ」または、ダッシュボードページ上部「APIとサービスを有効化」をクリックし、ライブラリへ。</p>\n<p>そこで、Firness と検索し、追加</p>\n<figure class=\"figure-image figure-image-fotolife\" title=\"検索後\">[f:id:naba0123:20190914120609p:plain]<figcaption>検索後</figcaption></figure>\n<figure class=\"figure-image figure-image-fotolife\" title=\"有効にした状態\">[f:id:naba0123:20190914120716p:plain]<figcaption>有効にした状態</figcaption></figure>\n<h2>OAuth 同意画面、認証情報追加</h2>\n<p>ユーザー（自分）に許可を出すための画面設定が必要。<br>\nAPIとサービス画面の、「OAuth同意画面」から、アプリ名のみをとりあえず設定。</p>\n<figure class=\"figure-image figure-image-fotolife\" title=\"設定画面\">[f:id:naba0123:20190914121004p:plain]<figcaption>設定画面</figcaption></figure>\n<p>設定したら保存してください。</p>\n<p>次に、認証情報を追加。<br>\n「認証情報」をクリックし、「認証情報を作成」をクリック。<br>\n「OAuth クライアントID」を選択。</p>\n<p>[f:id:naba0123:20190914121124p:plain]</p>\n<p>「ウェブアプリケーション」を選択し、\n「承認済みのJavaScript生成元」には</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">https://developers.google.com</code></pre></div>\n<p>を、「承認済みのリダイレクトURI」には</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">https://developers.google.com/oauthplayground</code></pre></div>\n<p>を設定してください。このあたりはドキュメント通りです。</p>\n<p>[https://developers.google.com/fit/rest/v1/get-started?hl=ja:embed:cite]</p>\n<h2>OAuth 2.0 Playground で動作準備</h2>\n<p>Google Developers OAuth 2.0 Playground 上で実行してみます。<br>\nGoogle API のテスト環境のような形でしょうか。</p>\n<p>[https://developers.google.com/oauthplayground/?hl=ja:embed:cite]</p>\n<p>下記は OAuth 2.0 Playground についての記事\n[https://developers.google.com/identity/protocols/OAuth2:embed:cite]</p>\n<p>アクセスしたら、「Step1 Select &#x26; authorize APIs」で「Fitness v1」を探してクリックで展開、<br>\nいろいろ試してみたいので、全てのエンドポイント？にチェックを入れて、「Authorize APIs」をクリック。</p>\n<figure class=\"figure-image figure-image-fotolife\" title=\"アルファベット順に並んでいます。Google Fit ではないので注意\">[f:id:naba0123:20190914121905p:plain]<figcaption>アルファベット順に並んでいます。Google Fit ではないので注意</figcaption></figure>\n<p>すると、どの Google アカウントで認証するかの、見たことある画面になりますので、アカウントを選択し、許可をクリック</p>\n<figure class=\"figure-image figure-image-fotolife\" title=\"上部\">[f:id:naba0123:20190914122229p:plain]<figcaption>上部</figcaption></figure>\n<figure class=\"figure-image figure-image-fotolife\" title=\"（長いので中略）下部\">[f:id:naba0123:20190914122042p:plain]<figcaption>（中略）下部</figcaption></figure>\n<p>すると、前の画面に戻ってAuthorization code が入力された状態になりますので、<br>\n「Exchange authorization code for tokens」をクリック。  </p>\n<p>Authorization code は一時的なアクセス許可をするための橋渡しのような状態で、\nこれを利用することで、Refresh token と Access token に変換することができます。</p>\n<p>▽参考\n[https://developers.google.com/identity/protocols/OAuth2:embed:cite]</p>\n<figure class=\"figure-image figure-image-fotolife\" title=\"色々情報が出てきたらOKです\">[f:id:naba0123:20190914122627p:plain]<figcaption>色々情報が出てきたらOKです</figcaption></figure>\n<p>アクセストークンは1時間期限なので（カウントダウンされてますね）、<br>\n期限が切れたら Refresh token を利用してアクセストークンを再取得する必要があります。</p>\n<p>この Playground ではAuto Refresh できるみたいなので、チェック入れておきましょう。</p>\n<h1>動作確認</h1>\n<p>使用できるAPIについては、Google Fit REST API のドキュメントに記載されています。</p>\n<p>[https://developers.google.com/fit/rest/v1/reference/:embed:cite]</p>\n<p>体重を取ってみましょう。</p>\n<p>使用できる dataSources (運動だったり、血圧だったり、体重だったり、睡眠だったり)は、</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">https://www.googleapis.com/fitness/v1/users/me/dataSources</code></pre></div>\n<p>にGETをすることで取得できます。</p>\n<figure class=\"figure-image figure-image-fotolife\" title=\"レスポンスの weight にハイライト\">[f:id:naba0123:20190914123052p:plain]<figcaption>レスポンスの weight にハイライト</figcaption></figure>\n<p>体重の部分のJSONを観ると、「dataStreamId」というのがあります。これが Google Fit API でのデータ種別IDになります。</p>\n<p>最後に、この dataStreamId を使って、過去の体重保存結果を取得しましょう。<br>\nテンプレートは以下</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">https://www.googleapis.com/fitness/v1/users/{user}/dataSources/{dataSourceId}/datasets/{start-end}</code></pre></div>\n<p><em>{user_id}</em> は <em>me</em> 、 <em>dataSourceId</em> は先程の dataStreamId、datasets の <em>{start-end}</em> は、取りたい期間を <em>ナノ秒</em> で指定する必要があります。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">GET https://www.googleapis.com/fitness/v1/users/me/dataSources/derived:com.google.weight:com.google.android.gms:merge_weight/datasets/0-1568432908000000000</code></pre></div>\n<figure class=\"figure-image figure-image-fotolife\" title=\"実行結果\">[f:id:naba0123:20190914125223p:plain]<figcaption>実行結果</figcaption></figure>\n<p>無事に取れていそうですね。<br>\nもちろんですが、過去に値を追加したことがなければ値は帰ってこないと思います。</p>\n<p>それにしても、なぜナノ秒・・・？</p>\n<h1>最後に</h1>\n<p>APIドキュメントを読めば簡単にPOST もできそうですが、自分用メモとしてまた記事を作るかもしれません。</p>","frontmatter":{"title":"Google Fit API & OAuth 2.0 Playground を試して体重を取ってみる","date":"2019/09/14 12:56","tags":["Google"]},"id":"0992e49c-1abc-58fa-9673-53606796b195"},"relatedPosts":{"edges":[{"node":{"fields":{"slug":"/2019/0914/"},"frontmatter":{"title":"Google Fit API & OAuth 2.0 Playground を試して体重を取ってみる","date":"2019/09/14 12:56","tags":["Google"]},"id":"0992e49c-1abc-58fa-9673-53606796b195"}}]}},"pageContext":{"slug":"/2019/0914/","tags":["Google"]}}}