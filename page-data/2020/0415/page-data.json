{"componentChunkName":"component---src-templates-blog-post-js","path":"/2020/0415/","result":{"data":{"site":{"siteMetadata":{"title":"なばろぐ","description":"プログラミング、ピアノ作曲・演奏、雑記など"}},"markdownRemark":{"html":"<div class=\"alert info\">\nはてなブログからの移行記事\n</div>\n<p>環境構築で躓く人用と自分のためにメモ。</p>\n<!-- more -->\n<h1>検証、構築環境</h1>\n<ul>\n<li>\n<p>Windows 10 Pro</p>\n<ul>\n<li>Insider Preview 19041.207</li>\n</ul>\n</li>\n<li>\n<p>WSL2</p>\n<ul>\n<li>Ubuntu-18.04</li>\n</ul>\n</li>\n<li>\n<p>Jenkins</p>\n<ul>\n<li>実行当時は 2.222.1</li>\n</ul>\n</li>\n<li>\n<p>node -v</p>\n<ul>\n<li>v12.16.2</li>\n</ul>\n</li>\n<li>\n<p>npm -v</p>\n<ul>\n<li>6.14.4</li>\n</ul>\n</li>\n<li>\n<p>gatsby -v</p>\n<ul>\n<li>Gatsby CLI version: 2.11.8</li>\n</ul>\n</li>\n</ul>\n<h1>docker-compose ファイル</h1>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">version: &#39;3&#39;\nservices:\n  jenkins:\n    image: jenkins/jenkins:lts\n    volumes:\n      - ./jenkins_home:/var/jenkins_home\n    working_dir: /var/jenkins_home\n    ports:\n      - &quot;8080:8080&quot;\n      - &quot;50000:50000&quot;\n    tty: true</code></pre></div>\n<ul>\n<li>Jenkins イメージは公式の LTS を指定</li>\n<li>コンテナ内において、 <em>/var/jenkins_home</em> を Jenkins のワーキングディレクトリに指定し、データを永続化させるためにローカルの <em>./jenkins_home</em> とボリューム共有化</li>\n<li>ポートは基本 8080 で大丈夫だと思う。50000 番はスレーブ用らしい。</li>\n</ul>\n<h2>参考</h2>\n<p>[https://qiita.com/legitwhiz/items/e6ac1f5a94f09ff2bb1d:title]</p>\n<p>[https://tsubalog.hatenablog.com/entry/2017/08/12/090000:title]</p>\n<h1>コンテナ起動</h1>\n<p>コンテナとの共有用のディレクトリ作成</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">WSL $ mkdir jenkins_home</code></pre></div>\n<p>コンテナ起動</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">WSL $ docker-compose up\nコンソールに起動時に入力するパスワードが表示されるので、必ずメモ\n～\njenkins_1  | *************************************************************\njenkins_1  | *************************************************************\njenkins_1  | *************************************************************\njenkins_1  |\njenkins_1  | Jenkins initial setup is required. An admin user has been created and a password generated.\njenkins_1  | Please use the following password to proceed to installation:\njenkins_1  |\njenkins_1  | XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\njenkins_1  |\njenkins_1  | This may also be found at: /var/jenkins_home/secrets/initialAdminPassword\njenkins_1  |\njenkins_1  | *************************************************************\njenkins_1  | *************************************************************\njenkins_1  | *************************************************************\n～</code></pre></div>\n<p>Jenkins のセットアップについては、他を参照。</p>\n<p>[https://qiita.com/zb185423/items/af2643fa6ebf0639b6ab:embed:cite]</p>\n<h1>Node.js インストール</h1>\n<p>コンテナにルートユーザーで入る。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">WSL $ docker-compose exec --user root jenkins /bin/bash</code></pre></div>\n<p>公式のセットアップ方法を利用。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Conaitner # curl -sL https://deb.nodesource.com/setup_12.x | bash -\nContainer # apt-get install -y nodejs</code></pre></div>\n<h2>参照</h2>\n<p>[https://github.com/nodesource/distributions/blob/master/README.md:title]</p>\n<h1>GatsbyJS インストール</h1>\n<p>一旦コンテナを抜けて、jenkins ユーザーで入り直す</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">WSL $ docker-compose exec jenkins /bin/bash</code></pre></div>\n<p>そのままインストールしようとすると、多分 <em>permission denied</em> エラーが起きるので、インストールパスを <em>~/.npm-global</em> に変更。\nglobal インストールしてるのは許して＞＜</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Container $ mkdir ~/.npm-global\nContainer $ npm config set prefix &#39;~/.npm-global&#39;\nContainer $ vim ~/.profile\n.profile 多分新規作成。下記を追加して保存\nexport PATH=~/.npm-global/bin:$PATH\nContainer $ source ~/.profile\nContainer $ npm install -g gatsby-cli</code></pre></div>\n<h2>参照</h2>\n<p>[https://qiita.com/okohs/items/ced3c3de30af1035242d:title]</p>\n<p>セットアップについてはこれで完了。</p>\n<h1>GatsbyJS ビルドについて</h1>\n<p>ビルド時は、毎回 <em>gatsby clean</em> をしたほうが良いかもしれない。（Jenkins に限らずローカルでも再現した）<br>\n勉強し初めなので理由はまだ分からないが、公式チュートリアルで一旦動くことまで確認してジョブを実行したところ、1回目は成功するが、2回目から <em>ERROR #98123 WEBPACK</em> エラーが起きてしまった。<br>\nキャッシュデータを消さないとうまく行かないらしい？</p>\n<p>サンプルジョブシェル</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">#!/bin/bash\n\nsource ~/.profile\n\ncd &quot;GatsbyJS プロジェクトパス&quot;\nnpm install\ngatsby clean\ngatsby build\n\n～これ以降はコミットするなりデプロイするなり～</code></pre></div>\n<ul>\n<li>\n<p>1行目の <em>#!/bin/bash</em> は、source 行を実行するために必要</p>\n<ul>\n<li>デフォルトシェルが sh だから？</li>\n<li>[https://stackoverflow.com/questions/13702425/source-command-not-found-in-sh-shell/13702876:title]</li>\n</ul>\n</li>\n<li>source 行は、先程作成した <em>.profile</em> を指定。そうしないと先程 global でインストールした gatsby コマンドが見当たらない、と言われる</li>\n</ul>\n<h2>参考</h2>\n<p>[https://github.com/gatsbyjs/gatsby/issues/22755:title]</p>","frontmatter":{"title":"Docker + Jenkins で GatsbyJs ビルド環境作成","date":"2020/04/15 23:17","tags":["Docker","Jenkins","GatsbyJS","Node.js"]},"id":"9468aecc-ca75-59c6-a71c-cfd720dedc36"},"relatedPosts":{"edges":[{"node":{"fields":{"slug":"/2020/0415/"},"frontmatter":{"title":"Docker + Jenkins で GatsbyJs ビルド環境作成","date":"2020/04/15 23:17","tags":["Docker","Jenkins","GatsbyJS","Node.js"]},"id":"9468aecc-ca75-59c6-a71c-cfd720dedc36"}},{"node":{"fields":{"slug":"/2019/1109/"},"frontmatter":{"title":"Python (Client) + Selenium Server (Docker) で Web スクレイピング環境構築","date":"2019/11/09 12:06","tags":["Python","Selenium","Docker"]},"id":"73bf763c-d9dd-5aff-96bc-50ba16c3a317"}}]}},"pageContext":{"slug":"/2020/0415/","tags":["Docker","Jenkins","GatsbyJS","Node.js"]}}}